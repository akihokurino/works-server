directive @juniper(
    ownership: String = "borrowed",
    infallible: Boolean = false,
    with_time_zone: Boolean = true,
    async: Boolean = false,
    stream_item_infallible: Boolean = true,
    stream_type: String = null
) on FIELD_DEFINITION | SCALAR

schema {
    query: Query
    mutation: Mutation
}

type Query {
    me: Me! @juniper(ownership: "owned", async: true)
    supplierList: SupplierConnection! @juniper(ownership: "owned", async: true)
    invoiceList(supplierId: String!): InvoiceConnection! @juniper(ownership: "owned", async: true)
    invoiceHistoryList: InvoiceHistoryConnection! @juniper(ownership: "owned", async: true)
}

type Mutation {
    debug: Boolean! @juniper(ownership: "owned", async: true)
    authenticate: Me! @juniper(ownership: "owned", async: true)
    createSupplier(input: CreateSupplierInput!): Supplier! @juniper(ownership: "owned", async: true)
    updateSupplier(input: UpdateSupplierInput!): Supplier! @juniper(ownership: "owned", async: true)
    deleteSupplier(input: DeleteSupplierInput!): Boolean! @juniper(ownership: "owned", async: true)
    connectMisoca(input: ConnectMisocaInput!): Boolean! @juniper(ownership: "owned", async: true)
    refreshMisoca: Boolean! @juniper(ownership: "owned", async: true)
    downloadInvoicePDF(input: DownloadInvoicePDFInput!): String! @juniper(ownership: "owned", async: true)
}

interface Node {
    id: ID! @juniper(ownership: "owned")
}

type Me implements Node {
    id: ID! @juniper(ownership: "owned")
    suppliers: SupplierConnection! @juniper(ownership: "owned", async: true)
}

type Supplier implements Node {
    id: ID! @juniper(ownership: "owned")
    name: String! @juniper(ownership: "owned")
    billingAmountIncludeTax: Int! @juniper(ownership: "owned")
    billingAmountExcludeTax: Int! @juniper(ownership: "owned")
    billingType: GraphQLBillingType! @juniper(ownership: "owned")
    subject: String! @juniper(ownership: "owned")
    invoiceList: InvoiceConnection! @juniper(ownership: "owned")
}

type SupplierEdge {
    node: Supplier! @juniper(ownership: "owned", async: true)
}

type SupplierConnection {
    edges: [SupplierEdge!]! @juniper(ownership: "owned", async: true)
}

type Invoice implements Node {
    id: ID! @juniper(ownership: "owned")
    issueYMD: String! @juniper(ownership: "owned")
    paymentDueOnYMD: String! @juniper(ownership: "owned")
    invoiceNumber: String! @juniper(ownership: "owned")
    paymentStatus: GraphQLPaymentStatus! @juniper(ownership: "owned")
    invoiceStatus: GraphQLInvoiceStatus! @juniper(ownership: "owned")
    recipientName: String! @juniper(ownership: "owned")
    subject: String! @juniper(ownership: "owned")
    totalAmount: Int! @juniper(ownership: "owned")
    tax: Int! @juniper(ownership: "owned")
}

type InvoiceEdge {
    node: Invoice! @juniper(ownership: "owned", async: true)
}

type InvoiceConnection {
    edges: [InvoiceEdge!]! @juniper(ownership: "owned", async: true)
}

type InvoiceHistory implements Node {
    id: ID! @juniper(ownership: "owned")
    invoice: Invoice! @juniper(ownership: "owned")
    supplier: Supplier! @juniper(ownership: "owned")
}

type InvoiceHistoryEdge {
    node: InvoiceHistory! @juniper(ownership: "owned", async: true)
}

type InvoiceHistoryConnection {
    edges: [InvoiceHistoryEdge!]! @juniper(ownership: "owned", async: true)
}

enum GraphQLBillingType {
    Monthly
    OneTime
}

enum GraphQLPaymentStatus {
    UnPaid
    Paid
}

enum GraphQLInvoiceStatus {
    UnSubmitted
    Submitted
}

input CreateSupplierInput {
    name: String!
    billingAmount: Int!
    billingType: GraphQLBillingType!
    subject: String!
    subjectTemplate: String!
}

input UpdateSupplierInput {
    id: String!
    name: String!
    billingAmount: Int!
    subject: String!
    subjectTemplate: String!
}

input DeleteSupplierInput {
    id: String!
}

input ConnectMisocaInput {
    code: String!
}

input DownloadInvoicePDFInput {
    invoiceId: String!
}