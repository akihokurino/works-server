---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api
spec:
  replicas: 1
  selector:
    matchLabels:
      app: api
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: api
    spec:
      containers:
        - name: api-container
          image: ${IMAGE}
          command: [
              "sh",
              "-c",
              "/app/target/release/app-api"
          ]
          env:
            - name: RUST_ENV
              value: /var/secrets/env
            - name: GOOGLE_APPLICATION_CREDENTIALS
              value: /var/secrets/gcp/credentials.json
            - name: FIREBASE_CREDENTIALS
              value: /var/secrets/firebase/credentials.json
          volumeMounts:
            - name: gcp-credentials
              mountPath: /var/secrets/gcp
              readOnly: true
            - name: firebase-credentials
              mountPath: /var/secrets/firebase
              readOnly: true
            - name: env
              mountPath: /var/secrets
              readOnly: true
          ports:
            - containerPort: 3000
          readinessProbe:
            httpGet:
              path: /health_check
              port: 3000
            initialDelaySeconds: 5
            periodSeconds: 5
        - name: sql-proxy
          image: gcr.io/cloudsql-docker/gce-proxy:1.16
          command:
            [
                "/cloud_sql_proxy",
                "-instances=works-prod:asia-northeast1:main=tcp:0.0.0.0:3306",
                "-credential_file=/var/secrets/gcp/credentials.json"
            ]
          volumeMounts:
            - name: gcp-credentials
              mountPath: /var/secrets/gcp
              readOnly: true
      volumes:
        - name: gcp-credentials
          secret:
            secretName: gcp-credentials
        - name: firebase-credentials
          secret:
            secretName: firebase-credentials
        - name: env
          secret:
            secretName: env

---
apiVersion: v1
kind: Service
metadata:
  name: api-node-port
spec:
  type: NodePort
  ports:
    - name: "http-port"
      protocol: "TCP"
      port: 80
      targetPort: 3000
  selector:
    app: api

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: api-ingress
  annotations:
    kubernetes.io/ingress.global-static-ip-name: api-ip
    ingress.gcp.kubernetes.io/pre-shared-cert: api-cert
spec:
  rules:
    - host: works-api.akiho.app
      http:
        paths:
        - path: /*
          pathType: ImplementationSpecific
          backend:
            service:
              name: api-node-port
              port:
                number: 80

---
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: sync-invoice
spec:
  schedule: "0 */1 * * *"
  concurrencyPolicy: Forbid
  startingDeadlineSeconds: 300
  successfulJobsHistoryLimit: 5
  failedJobsHistoryLimit: 3
  suspend: false
  jobTemplate:
    spec:
      completions: 1
      parallelism: 1
      backoffLimit: 1
      template:
        metadata:
          name: sync-invoice
        spec:
          restartPolicy: Never
          containers:
            - name: sync-invoice-container
              image: ${IMAGE}
              command: [
                  "sh",
                  "-c",
                  "/app/target/release/app-batch sync-invoice"
              ]
              env:
                - name: RUST_ENV
                  value: /var/secrets/env
                - name: GOOGLE_APPLICATION_CREDENTIALS
                  value: /var/secrets/gcp/credentials.json
                - name: FIREBASE_CREDENTIALS
                  value: /var/secrets/firebase/credentials.json
              volumeMounts:
                - name: gcp-credentials
                  mountPath: /var/secrets/gcp
                  readOnly: true
                - name: firebase-credentials
                  mountPath: /var/secrets/firebase
                  readOnly: true
                - name: env
                  mountPath: /var/secrets
                  readOnly: true
          volumes:
            - name: gcp-credentials
              secret:
                secretName: gcp-credentials
            - name: firebase-credentials
              secret:
                secretName: firebase-credentials
            - name: env
              secret:
                secretName: env
