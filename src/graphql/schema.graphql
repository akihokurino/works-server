directive @juniper(
    ownership: String = "borrowed",
    infallible: Boolean = false,
    with_time_zone: Boolean = true,
    async: Boolean = false,
    stream_item_infallible: Boolean = true,
    stream_type: String = null
) on FIELD_DEFINITION | SCALAR

schema {
    query: Query
    mutation: Mutation
}

type Query {
    me: Me! @juniper(ownership: "owned", async: true)
}

type Mutation {
    authenticate: Me! @juniper(ownership: "owned", async: true)
    createSupplier(input: CreateSupplierInput!): Supplier! @juniper(ownership: "owned", async: true)
    updateSupplier(input: UpdateSupplierInput!): Supplier! @juniper(ownership: "owned", async: true)
    deleteSupplier(input: DeleteSupplierInput!): Boolean! @juniper(ownership: "owned", async: true)
}

interface Node {
    id: ID! @juniper(ownership: "owned")
}

type Me implements Node {
    id: ID! @juniper(ownership: "owned")
    suppliers: SupplierConnection! @juniper(ownership: "owned", async: true)
}

type Supplier implements Node {
    id: ID! @juniper(ownership: "owned")
    name: String! @juniper(ownership: "owned")
    billingAmountIncludeTax: Int! @juniper(ownership: "owned")
    billingAmountExcludeTax: Int! @juniper(ownership: "owned")
    billingType: SupplierBillingType! @juniper(ownership: "owned")
}

type SupplierEdge {
    node: Supplier! @juniper(ownership: "owned", async: true)
}

type SupplierConnection {
    edges: [SupplierEdge!]! @juniper(ownership: "owned", async: true)
}

enum SupplierBillingType {
    Monthly
    OneTime
}

input CreateSupplierInput {
    name: String!
    billingAmount: Int!
    billingType: SupplierBillingType!
}

input UpdateSupplierInput {
    id: String!
    name: String!
    billingAmount: Int!
}

input DeleteSupplierInput {
    id: String!
}